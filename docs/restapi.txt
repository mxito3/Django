1.使用curl 调试api 
	选项：
		-i　显示响应头
		-H  向资源请求头部
		-X  传递HTTP方法名称
		-d  传入双引号中的参数，多个参数用’&’分割
	get :
		curl -i -H "Accept: application/json" -X GET http://localhost:8000/snippets/
		URL后面一定要有/

	post :
		curl -i -H "Accept: application/json" -X POST -d '{"code": "yapie is the best"}' http://127.0.0.1:8000/snippets/	

		-d后面的参数用json字符串的形式,只需要填必填字段就可以通过

	put :
		curl -i -H "Accept:application/json" -X put -d '{"code":"yapie is the best ,you are right"}' http://127.0.0.1:8000/snippets/5/

	delete:
		curl -i -H "Accept:application/json" -X delete http://127.0.0.1:8000/snippets/5/

2.使用rest_framework提供的response可以返回客户端要求的content-type类型	的数据

3.使用rest_framework提供的request(extend HTTP_response)可以提供更具有扩展性质的request parse
	用法：
		request.POST  只处理表单数据，只用于post方法
		request.data　　处理任意数据，可用于put patch post
４．status 
	from rest_framework import status
	使用该模块提供的状态码标识，而不是数字
	post:status.HTTP_201_CREATED
	404:status.HTTP_400_BAD_REQUEST
	deletet:status.HTTP_204_NO_CONTENT
	请求无效：status.HTTP_400_BAD_REQUEST
5.api视图：
	@api_view用于处理基于函数的视图的装饰器。
	APIView基于类的视图工作。	
